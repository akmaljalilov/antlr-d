module antlr.v4.runtime.VocabularyImpl;

import antlr.v4.runtime.Vocabulary;
import std.conv;

// Class VocabularyImpl
/**
 * TODO add class description
 */
class VocabularyImpl : Vocabulary
{

    /**
     * @uml
     * @final
     */
    public static const string[] EMPTY_NAMES;

    public string[] literalNames;

    public string[] symbolicNames;

    public string[] displayNames;

    /**
     * @uml
     * @final
     */
    private int maxTokenType;

    public int getMaxTokenType()
    {
        return maxTokenType;
    }

    public string getDisplayName(int tokenType)
    {
        if (tokenType >= 0 && tokenType < displayNames.length) {
            string displayName = displayNames[tokenType];
            if (displayName !is null) {
                return displayName;
            }
        }

        string literalName = getLiteralName(tokenType);
        if (literalName !is null) {
            return literalName;
        }

        String symbolicName = getSymbolicName(tokenType);
        if (symbolicName != null) {
            return symbolicName;
        }

        return to!string(tokenType);
    }

    /**
     * @uml
     * Returns a {@link VocabularyImpl} instance from the specified set of token
     * names. This method acts as a compatibility layer for the single
     * {@code tokenNames} array generated by previous releases of ANTLR.
     *
     * <p>The resulting vocabulary instance returns {@code null} for
     * {@link #getLiteralName(int)} and {@link #getSymbolicName(int)}, and the
     * value from {@code tokenNames} for the display names.</p>
     *
     * @param tokenNames The token names, or {@code null} if no token names are
     * available.
     * @return A {@link Vocabulary} instance which uses {@code tokenNames} for
     * the display names of tokens.
     */
    public static Vocabulary fromTokenNames(string[] tokenNames)
    {
        if (tokenNames is null || tokenNames.length == 0) {
            return EMPTY_VOCABULARY;
        }

        string[] literalNames = Arrays.copyOf(tokenNames, tokenNames.length);
        string[] symbolicNames = Arrays.copyOf(tokenNames, tokenNames.length);
        for (int i = 0; i < tokenNames.length; i++) {
            String tokenName = tokenNames[i];
            if (tokenName == null) {
                continue;
            }

            if (!tokenName.isEmpty()) {
                char firstChar = tokenName.charAt(0);
                if (firstChar == '\'') {
                    symbolicNames[i] = null;
                    continue;
                }
                else if (Character.isUpperCase(firstChar)) {
                    literalNames[i] = null;
                    continue;
                }
            }

            // wasn't a literal or symbolic name
            literalNames[i] = null;
            symbolicNames[i] = null;
        }

        return new VocabularyImpl(literalNames, symbolicNames, tokenNames);
    }

}
