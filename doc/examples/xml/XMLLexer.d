// Generated from doc/examples/xml/XMLLexer.g4 by ANTLR 4.7.1
import antlr.v4.runtime.Lexer;
import antlr.v4.runtime.CharStream;
import antlr.v4.runtime.InterfaceRuleContext;
import antlr.v4.runtime.RuntimeMetaData;
import antlr.v4.runtime.Token;
import antlr.v4.runtime.TokenStream;
import antlr.v4.runtime.Vocabulary;
import antlr.v4.runtime.VocabularyImpl;
import antlr.v4.runtime.atn.ATN;
import antlr.v4.runtime.atn.PredictionContextCache;
import antlr.v4.runtime.atn.ATNDeserializer;
import antlr.v4.runtime.atn.LexerATNSimulator;
import antlr.v4.runtime.dfa.DFA;
import antlr.v4.runtime.LexerNoViableAltException;

public class XMLLexer : Lexer {
    alias recover = Lexer.recover;
    static this() { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

    protected static DFA[] _decisionToDFA;
    protected PredictionContextCache _sharedContextCache =
        new PredictionContextCache();
    public static immutable int
		COMMENT=1, CDATA=2, DTD=3, EntityRef=4, CharRef=5, SEA_WS=6, OPEN=7, XMLDeclOpen=8, 
		TEXT=9, CLOSE=10, SPECIAL_CLOSE=11, SLASH_CLOSE=12, SLASH=13, EQUALS=14, 
		STRING=15, Name=16, S=17, PI=18;
    public static string[] channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];
	public static string[] modeNames = [
		"DEFAULT_MODE", "INSIDE", "PROC_INSTR"
	];

	public static string[] ruleNames = [
		"COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", "OPEN", "XMLDeclOpen", 
		"SPECIAL_OPEN", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
		"EQUALS", "STRING", "Name", "S", "HEXDIGIT", "DIGIT", "NameChar", "NameStartChar", 
		"PI", "IGNORE"
	];

	private static const string[] _LITERAL_NAMES = [
		null, null, null, null, null, null, null, "'<'", null, null, "'>'", null, 
		"'/>'", "'/'", "'='"
	];
	private static const string[] _SYMBOLIC_NAMES = [
		null, "COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", "OPEN", 
		"XMLDeclOpen", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
		"EQUALS", "STRING", "Name", "S", "PI"
	];
	public static Vocabulary VOCABULARY;

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	public static string[] tokenNames;

	static this() {
	    VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
	    string[_SYMBOLIC_NAMES.length] tokenNames;
	    for (int i = 0; i < tokenNames.length; i++) {
	        tokenNames[i] = VOCABULARY.getLiteralName(i);
	            if (tokenNames[i] is null) {
	                tokenNames[i] = VOCABULARY.getSymbolicName(i);
		    }

	            if (tokenNames[i] is null) {
	                tokenNames[i] = "<INVALID>";
	            }
	    }
	}

	override public string[] getTokenNames() {
		return tokenNames;
	}

	override public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public this(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	override
	public string getGrammarFileName() { return "XMLLexer.g4"; }

	override
	public string[] getRuleNames() { return ruleNames; }

	override
	public wstring getSerializedATN() { return _serializedATN; }

        override
	public string[] getChannelNames() { return channelNames; }

	override
	public string[] getModeNames() { return modeNames; }

	override
	public ATN getATN() { return _ATN; }

	public static immutable wstring _serializedATN =
		"\x03\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\x02\x14\u00e9\b\x01"~
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04"~
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0b\t\x0b\x04"~
		"\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11"~
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16"~
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03"~
		"\x02\x03\x02\x03\x02\x07\x02<\n\x02\f\x02\x0e\x02?\x0b\x02\x03\x02\x03"~
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03"~
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03P\n\x03\f\x03\x0e\x03S\x0b"~
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x07"~
		"\x04]\n\x04\f\x04\x0e\x04`\x0b\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03"~
		"\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x06\x06n"~
		"\n\x06\r\x06\x0e\x06o\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06"~
		"\x03\x06\x06\x06y\n\x06\r\x06\x0e\x06z\x03\x06\x03\x06\x05\x06\x7f\n\x06"~
		"\x03\x07\x03\x07\x05\x07\u0083\n\x07\x03\x07\x06\x07\u0086\n\x07\r\x07"~
		"\x0e\x07\u0087\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03"~
		"\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03"~
		"\n\x03\x0b\x06\x0b\u00a1\n\x0b\r\x0b\x0e\x0b\u00a2\x03\f\x03\f\x03\f\x03"~
		"\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e"~
		"\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x11\x03\x11\x07\x11\u00b9\n\x11\f"~
		"\x11\x0e\x11\u00bc\x0b\x11\x03\x11\x03\x11\x03\x11\x07\x11\u00c1\n\x11"~
		"\f\x11\x0e\x11\u00c4\x0b\x11\x03\x11\x05\x11\u00c7\n\x11\x03\x12\x03\x12"~
		"\x07\x12\u00cb\n\x12\f\x12\x0e\x12\u00ce\x0b\x12\x03\x13\x03\x13\x03\x13"~
		"\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16"~
		"\x05\x16\u00dc\n\x16\x03\x17\x05\x17\u00df\n\x17\x03\x18\x03\x18\x03\x18"~
		"\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x05=Q^\x02\x1a\x05\x03"~
		"\x07\x04\t\x05\x0b\x06\r\x07\x0f\b\x11\t\x13\n\x15\x02\x17\x0b\x19\f\x1b"~
		"\r\x1d\x0e\x1f\x0f!\x10#\x11%\x12\'\x13)\x02+\x02-\x02/\x021\x143\x02"~
		"\x05\x02\x03\x04\f\x04\x02\x0b\x0b\"\"\x04\x02((>>\x04\x02$$>>\x04\x02"~
		"))>>\x05\x02\x0b\f\x0f\x0f\"\"\x05\x022;CHch\x03\x022;\x04\x02/0aa\x05"~
		"\x02\u00b9\u00b9\u0302\u0371\u2041\u2042\n\x02<<C\\c|\u2072\u2191\u2c02"~
		"\u2ff1\u3003[154001]\uf902\ufdd1\ufdf2\uffff\x02\u00f3\x02\x05\x03\x02"~
		"\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\x0b\x03\x02"~
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02"~
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02"~
		"\x02\x02\x03\x19\x03\x02\x02\x02\x03\x1b\x03\x02\x02\x02\x03\x1d\x03\x02"~
		"\x02\x02\x03\x1f\x03\x02\x02\x02\x03!\x03\x02\x02\x02\x03#\x03\x02\x02"~
		"\x02\x03%\x03\x02\x02\x02\x03\'\x03\x02\x02\x02\x041\x03\x02\x02\x02\x04"~
		"3\x03\x02\x02\x02\x055\x03\x02\x02\x02\x07D\x03\x02\x02\x02\tX\x03\x02"~
		"\x02\x02\x0be\x03\x02\x02\x02\r~\x03\x02\x02\x02\x0f\u0085\x03\x02\x02"~
		"\x02\x11\u0089\x03\x02\x02\x02\x13\u008d\x03\x02\x02\x02\x15\u0097\x03"~
		"\x02\x02\x02\x17\u00a0\x03\x02\x02\x02\x19\u00a4\x03\x02\x02\x02\x1b\u00a8"~
		"\x03\x02\x02\x02\x1d\u00ad\x03\x02\x02\x02\x1f\u00b2\x03\x02\x02\x02!"~
		"\u00b4\x03\x02\x02\x02#\u00c6\x03\x02\x02\x02%\u00c8\x03\x02\x02\x02\'"~
		"\u00cf\x03\x02\x02\x02)\u00d3\x03\x02\x02\x02+\u00d5\x03\x02\x02\x02-"~
		"\u00db\x03\x02\x02\x02/\u00de\x03\x02\x02\x021\u00e0\x03\x02\x02\x023"~
		"\u00e5\x03\x02\x02\x0256\x07>\x02\x0267\x07#\x02\x0278\x07/\x02\x0289"~
		"\x07/\x02\x029=\x03\x02\x02\x02:<\x0b\x02\x02\x02;:\x03\x02\x02\x02<?"~
		"\x03\x02\x02\x02=>\x03\x02\x02\x02=;\x03\x02\x02\x02>@\x03\x02\x02\x02"~
		"?=\x03\x02\x02\x02@A\x07/\x02\x02AB\x07/\x02\x02BC\x07@\x02\x02C\x06\x03"~
		"\x02\x02\x02DE\x07>\x02\x02EF\x07#\x02\x02FG\x07]\x02\x02GH\x07E\x02\x02"~
		"HI\x07F\x02\x02IJ\x07C\x02\x02JK\x07V\x02\x02KL\x07C\x02\x02LM\x07]\x02"~
		"\x02MQ\x03\x02\x02\x02NP\x0b\x02\x02\x02ON\x03\x02\x02\x02PS\x03\x02\x02"~
		"\x02QR\x03\x02\x02\x02QO\x03\x02\x02\x02RT\x03\x02\x02\x02SQ\x03\x02\x02"~
		"\x02TU\x07_\x02\x02UV\x07_\x02\x02VW\x07@\x02\x02W\b\x03\x02\x02\x02X"~
		"Y\x07>\x02\x02YZ\x07#\x02\x02Z^\x03\x02\x02\x02[]\x0b\x02\x02\x02\\[\x03"~
		"\x02\x02\x02]`\x03\x02\x02\x02^_\x03\x02\x02\x02^\\\x03\x02\x02\x02_a"~
		"\x03\x02\x02\x02`^\x03\x02\x02\x02ab\x07@\x02\x02bc\x03\x02\x02\x02cd"~
		"\b\x04\x02\x02d\n\x03\x02\x02\x02ef\x07(\x02\x02fg\x05%\x12\x02gh\x07"~
		"=\x02\x02h\f\x03\x02\x02\x02ij\x07(\x02\x02jk\x07%\x02\x02km\x03\x02\x02"~
		"\x02ln\x05+\x15\x02ml\x03\x02\x02\x02no\x03\x02\x02\x02om\x03\x02\x02"~
		"\x02op\x03\x02\x02\x02pq\x03\x02\x02\x02qr\x07=\x02\x02r\x7f\x03\x02\x02"~
		"\x02st\x07(\x02\x02tu\x07%\x02\x02uv\x07z\x02\x02vx\x03\x02\x02\x02wy"~
		"\x05)\x14\x02xw\x03\x02\x02\x02yz\x03\x02\x02\x02zx\x03\x02\x02\x02z{"~
		"\x03\x02\x02\x02{|\x03\x02\x02\x02|}\x07=\x02\x02}\x7f\x03\x02\x02\x02"~
		"~i\x03\x02\x02\x02~s\x03\x02\x02\x02\x7f\x0e\x03\x02\x02\x02\u0080\u0086"~
		"\t\x02\x02\x02\u0081\u0083\x07\x0f\x02\x02\u0082\u0081\x03\x02\x02\x02"~
		"\u0082\u0083\x03\x02\x02\x02\u0083\u0084\x03\x02\x02\x02\u0084\u0086\x07"~
		"\f\x02\x02\u0085\u0080\x03\x02\x02\x02\u0085\u0082\x03\x02\x02\x02\u0086"~
		"\u0087\x03\x02\x02\x02\u0087\u0085\x03\x02\x02\x02\u0087\u0088\x03\x02"~
		"\x02\x02\u0088\x10\x03\x02\x02\x02\u0089\u008a\x07>\x02\x02\u008a\u008b"~
		"\x03\x02\x02\x02\u008b\u008c\b\b\x03\x02\u008c\x12\x03\x02\x02\x02\u008d"~
		"\u008e\x07>\x02\x02\u008e\u008f\x07A\x02\x02\u008f\u0090\x07z\x02\x02"~
		"\u0090\u0091\x07o\x02\x02\u0091\u0092\x07n\x02\x02\u0092\u0093\x03\x02"~
		"\x02\x02\u0093\u0094\x05\'\x13\x02\u0094\u0095\x03\x02\x02\x02\u0095\u0096"~
		"\b\t\x03\x02\u0096\x14\x03\x02\x02\x02\u0097\u0098\x07>\x02\x02\u0098"~
		"\u0099\x07A\x02\x02\u0099\u009a\x03\x02\x02\x02\u009a\u009b\x05%\x12\x02"~
		"\u009b\u009c\x03\x02\x02\x02\u009c\u009d\b\n\x04\x02\u009d\u009e\b\n\x05"~
		"\x02\u009e\x16\x03\x02\x02\x02\u009f\u00a1\n\x03\x02\x02\u00a0\u009f\x03"~
		"\x02\x02\x02\u00a1\u00a2\x03\x02\x02\x02\u00a2\u00a0\x03\x02\x02\x02\u00a2"~
		"\u00a3\x03\x02\x02\x02\u00a3\x18\x03\x02\x02\x02\u00a4\u00a5\x07@\x02"~
		"\x02\u00a5\u00a6\x03\x02\x02\x02\u00a6\u00a7\b\f\x06\x02\u00a7\x1a\x03"~
		"\x02\x02\x02\u00a8\u00a9\x07A\x02\x02\u00a9\u00aa\x07@\x02\x02\u00aa\u00ab"~
		"\x03\x02\x02\x02\u00ab\u00ac\b\r\x06\x02\u00ac\x1c\x03\x02\x02\x02\u00ad"~
		"\u00ae\x071\x02\x02\u00ae\u00af\x07@\x02\x02\u00af\u00b0\x03\x02\x02\x02"~
		"\u00b0\u00b1\b\x0e\x06\x02\u00b1\x1e\x03\x02\x02\x02\u00b2\u00b3\x071"~
		"\x02\x02\u00b3 \x03\x02\x02\x02\u00b4\u00b5\x07?\x02\x02\u00b5\"\x03\x02"~
		"\x02\x02\u00b6\u00ba\x07$\x02\x02\u00b7\u00b9\n\x04\x02\x02\u00b8\u00b7"~
		"\x03\x02\x02\x02\u00b9\u00bc\x03\x02\x02\x02\u00ba\u00b8\x03\x02\x02\x02"~
		"\u00ba\u00bb\x03\x02\x02\x02\u00bb\u00bd\x03\x02\x02\x02\u00bc\u00ba\x03"~
		"\x02\x02\x02\u00bd\u00c7\x07$\x02\x02\u00be\u00c2\x07)\x02\x02\u00bf\u00c1"~
		"\n\x05\x02\x02\u00c0\u00bf\x03\x02\x02\x02\u00c1\u00c4\x03\x02\x02\x02"~
		"\u00c2\u00c0\x03\x02\x02\x02\u00c2\u00c3\x03\x02\x02\x02\u00c3\u00c5\x03"~
		"\x02\x02\x02\u00c4\u00c2\x03\x02\x02\x02\u00c5\u00c7\x07)\x02\x02\u00c6"~
		"\u00b6\x03\x02\x02\x02\u00c6\u00be\x03\x02\x02\x02\u00c7$\x03\x02\x02"~
		"\x02\u00c8\u00cc\x05/\x17\x02\u00c9\u00cb\x05-\x16\x02\u00ca\u00c9\x03"~
		"\x02\x02\x02\u00cb\u00ce\x03\x02\x02\x02\u00cc\u00ca\x03\x02\x02\x02\u00cc"~
		"\u00cd\x03\x02\x02\x02\u00cd&\x03\x02\x02\x02\u00ce\u00cc\x03\x02\x02"~
		"\x02\u00cf\u00d0\t\x06\x02\x02\u00d0\u00d1\x03\x02\x02\x02\u00d1\u00d2"~
		"\b\x13\x02\x02\u00d2(\x03\x02\x02\x02\u00d3\u00d4\t\x07\x02\x02\u00d4"~
		"*\x03\x02\x02\x02\u00d5\u00d6\t\b\x02\x02\u00d6,\x03\x02\x02\x02\u00d7"~
		"\u00dc\x05/\x17\x02\u00d8\u00dc\t\t\x02\x02\u00d9\u00dc\x05+\x15\x02\u00da"~
		"\u00dc\t\n\x02\x02\u00db\u00d7\x03\x02\x02\x02\u00db\u00d8\x03\x02\x02"~
		"\x02\u00db\u00d9\x03\x02\x02\x02\u00db\u00da\x03\x02\x02\x02\u00dc.\x03"~
		"\x02\x02\x02\u00dd\u00df\t\x0b\x02\x02\u00de\u00dd\x03\x02\x02\x02\u00df"~
		"0\x03\x02\x02\x02\u00e0\u00e1\x07A\x02\x02\u00e1\u00e2\x07@\x02\x02\u00e2"~
		"\u00e3\x03\x02\x02\x02\u00e3\u00e4\b\x18\x06\x02\u00e42\x03\x02\x02\x02"~
		"\u00e5\u00e6\x0b\x02\x02\x02\u00e6\u00e7\x03\x02\x02\x02\u00e7\u00e8\b"~
		"\x19\x04\x02\u00e84\x03\x02\x02\x02\x15\x02\x03\x04=Q^oz~\u0082\u0085"~
		"\u0087\u00a2\u00ba\u00c2\u00c6\u00cc\u00db\u00de\x07\b\x02\x02\x07\x03"~
		"\x02\x05\x02\x02\x07\x04\x02\x06\x02\x02";
	public static ATN _ATN;

	static this() {
	    auto atnDeserializer = new ATNDeserializer;
	    _ATN = atnDeserializer.deserialize(_serializedATN);
	    _decisionToDFA.length = 0;
	    for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
	        _decisionToDFA ~= new DFA(_ATN.getDecisionState(i), i);
	    }
	}
}