writeln(s) ::= <<import std.stdio : writeln; writeln(<s>);>>
write(s) ::= <<import std.stdio : write; write(<s>);>>
writeList(s) ::= <<import std.stdio : writeln; writeln(<s; separator="+">);>>

False() ::= "false"

True() ::= "true"

Not(v) ::= "!<v>"

Assert(s) ::= <<assert(<s>);>>

Cast(t,v) ::= "(cast(<t>)<v>)"

Append(a,b) ::= "<a> ~ <b>"

Concat(a,b) ::= "<a><b>"

DeclareLocal(s,v) ::= "Object <s> = <v>;"

AssertIsList(v) ::= "List\<?> __ttt__ = <v>;" // just use static type system

AssignLocal(s,v) ::= "<s> = <v>;"

InitIntMember(n,v) ::= <%int <n> = <v>;%>

InitBooleanMember(n,v) ::= <%bool <n> = <v>;%>

GetMember(n) ::= <%this.<n>%>

SetMember(n,v) ::= <%this.<n> = <v>;%>

AddMember(n,v) ::= <%this.<n> += <v>;%>

PlusMember(v,n) ::= <%<v> + this.<n>%>

MemberEquals(n,v) ::= <%this.<n> == <v>%>

ModMemberEquals(n,m,v) ::= <%this.<n> % <m> == <v>%>

ModMemberNotEquals(n,m,v) ::= <%this.<n> % <m> != <v>%>

DumpDFA() ::= "this.dumpDFA();"

Pass() ::= ""

StringList() ::= "List\<String>"

BuildParseTrees() ::= "setBuildParseTree(true);"

BailErrorStrategy() ::= <%setErrorHandler(new BailErrorStrategy());%>

ToStringTree(s) ::= <%<s>.toStringTree(this)%>

Column() ::= "this.getCharPositionInLine()"

Text() ::= "this.getText.get!(string)"

ValEquals(a,b) ::= <%<a>==<b>%>

TextEquals(a) ::= <%this.getText.get!(string) == "<a>"%>

PlusText(a) ::= <%"<a>" ~ this.getText.get!(string)%>

InputText() ::= "this._input.getText.get!(string)"

LTEquals(i, v) ::= <%this._input.LT(<i>).getText.get!(string).equals(<v>)%>

LANotEquals(i, v) ::= <%this._input.LA(<i>)!=<v>%>

TokenStartColumnEquals(i) ::= <%this._tokenStartCharPositionInLine==<i>%>

ImportListener(X) ::= ""

GetExpectedTokenNames() ::= "this.getExpectedTokens().toString(this.tokenNames)"

RuleInvocationStack() ::= "getRuleInvocationStack()"

LL_EXACT_AMBIG_DETECTION() ::= <<_interp.setPredictionMode(PredictionModeConst.LL_EXACT_AMBIG_DETECTION);>>

ParserToken(parser, token) ::= <%<parser>.<token>%>

Production(p) ::= <%<p>%>

Result(r) ::= <%<r>%>

ParserPropertyMember() ::= <<
@members {
bool Property() {
  return true;
}
}
>>

ParserPropertyCall(p, call) ::= "<p>.<call>"

PositionAdjustingLexer() ::= <<

override
public Token nextToken() {
    if (!cast(PositionAdjustingLexerATNSimulator)_interp) {
        _interp = new PositionAdjustingLexerATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    return super.nextToken();
}

override
public Token emit() {
    switch (_type) {
    case TOKENS:
        handleAcceptPositionForKeyword("tokens");
        break;

    case LABEL:
        handleAcceptPositionForIdentifier();
        break;

    default:
        break;
    }

    return super.emit();
}

private bool handleAcceptPositionForIdentifier() {
    import std.conv : to;
    auto tokenText = getText.get!(string);
    int identifierLength = 0;
    while (identifierLength \< tokenText.length && isIdentifierChar(tokenText[identifierLength])) {
        identifierLength++;
    }

    if (getInputStream().index() > _tokenStartCharIndex + identifierLength) {
        auto offset = identifierLength - 1;
        getInterpreter().resetAcceptPosition(getInputStream(), _tokenStartCharIndex + offset, _tokenStartLine,
                                             to!int(_tokenStartCharPositionInLine + offset));
        return true;
    }

    return false;
}

private bool handleAcceptPositionForKeyword(string keyword) {
    import std.conv : to;
    if (getInputStream().index() > _tokenStartCharIndex + keyword.length) {
        auto offset = to!int(keyword.length) - 1;
        getInterpreter.resetAcceptPosition(getInputStream(), _tokenStartCharIndex + offset, _tokenStartLine,
                                           to!int(_tokenStartCharPositionInLine + offset));
        return true;
    }

    return false;
}

override
public PositionAdjustingLexerATNSimulator getInterpreter() {
    return cast(PositionAdjustingLexerATNSimulator)super.getInterpreter();
}

private static bool isIdentifierChar(char c) {
    import std.ascii;
    return isAlphaNum(c) || c == '_';
}

protected static class PositionAdjustingLexerATNSimulator : LexerATNSimulator {

    public this(Lexer recog, ATN atn,
                DFA[] decisionToDFA,
                PredictionContextCache sharedContextCache)
    {
        super(recog, atn, decisionToDFA, sharedContextCache);
    }

    protected void resetAcceptPosition(CharStream input, size_t index, int line,
                                       int charPositionInLine) {
        input.seek(index);
        this.line = line;
        this.charPositionInLine = charPositionInLine;
        consume(input);
    }

}

>>

BasicListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
    public void visitTerminal(TerminalNode node) {
        import std.stdio : writef, writeln;
        writeln(node.getSymbol().getText());
    }
}
}
>>

WalkListener(s) ::= <<
ParseTreeWalker walker = new ParseTreeWalker();
walker.walk(new LeafListener(), <s>);
>>

TreeNodeWithAltNumField(X) ::= <<
@parser::members {
public static class MyRuleNode extends ParserRuleContext {
    public int altNum;
    public MyRuleNode(ParserRuleContext parent, int invokingStateNumber) {
        super(parent, invokingStateNumber);
    }
    override public int getAltNumber() { return altNum; }
    override public void setAltNumber(int altNum) { this.altNum = altNum; }
}
}
>>

TokenGetterListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
    public void exitA(TParser.AContext ctx) {
        import std.stdio : writef, writeln;
        if (ctx.getChildCount()==2)
            writef("%s %s %s",ctx.INT(0).getSymbol().getText(),
                ctx.INT(1).getSymbol().getText(),ctx.INT());
        else
            writeln(ctx.ID().getSymbol());
    }
}
}
>>

RuleGetterListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
    public void exitA(TParser.AContext ctx) {
        import std.stdio : writef, writeln;
        if (ctx.getChildCount()==2) {
            writef("%s %s %s",ctx.b(0).start.getText(),
                ctx.b(1).start.getText(),ctx.b().get(0).start.getText());
        } else
            writeln(ctx.b(0).start.getText());
    }
}
}
>>


LRListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
    public void exitE(TParser.EContext ctx) {
        import std.stdio : writef, writeln;
        if (ctx.getChildCount()==3) {
            writef("%s %s %s\n",ctx.e(0).start.getText(),
                ctx.e(1).start.getText(), ctx.e().get(0).start.getText());
        } else
            writeln(ctx.INT().getSymbol().getText());
    }
}
}
>>

LRWithLabelsListener(X) ::= <<
@parser::members {
public static class LeafListener extends TBaseListener {
    public void exitCall(TParser.CallContext ctx) {
        import std.stdio : writef, writeln;
        writef("%s %s",ctx.e().start.getText(),ctx.eList());
    }
    public void exitInt(TParser.IntContext ctx) {
        writeln(ctx.INT().getSymbol().getText());
    }
}
}
>>

DeclareContextListGettersFunction() ::= <<
void foo() {
    SContext s = null;
    List\<? extends AContext> a = s.a();
    List\<? extends BContext> b = s.b();
}
>>

Declare_foo() ::= <<
    public void foo() {import std.stdio : writeln;writeln("foo");}
>>

Invoke_foo() ::= "foo();"

Declare_pred() ::= <<bool pred(bool v) {
    writeln("eval="+v);
    return v;
}
>>

Invoke_pred(v) ::= <<this.pred(<v>)>>

ParserTokenType(t) ::= "Parser.<t>"
ContextRuleFunction(ctx, rule) ::= "<ctx>.<rule>"
StringType() ::= "string"
ContextMember(ctx, subctx, member) ::= "<ctx>.<subctx>.<member>"
